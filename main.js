!function(){"use strict";class t{constructor(t,e,s){this._name=t.name,this._link=t.link,this._cardSelector=e,this._handleImageClick=s,this._cardTemplate=document.querySelector(this._cardSelector),this._cardElement=this._getCardElement(),this._likeButton=this._cardElement.querySelector(".cards__like-button"),this._deleteButton=this._cardElement.querySelector(".cards__delete-button"),this._setEventListeners()}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton()})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteButton()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleLikeButton(){this._likeButton.classList.toggle("cards__like-button-active")}_handleDeleteButton(){this._cardElement.remove(),this._cardElement=null}_getCardElement(){const t=this._cardTemplate.content.firstElementChild.cloneNode(!0);return this._cardTitleEl=t.querySelector(".cards__title"),this._cardImageEl=t.querySelector(".cards__image"),this._cardTitleEl.textContent=this._name,this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,t}getCardElement(){return this._cardElement}}class e{constructor(t,e){this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._setEventListeners()}_setEventListeners(){this._form.addEventListener("submit",(t=>{t.preventDefault(),this._toggleButtonState()}))}_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_showInputError(t){const e=this._form.querySelector(`#${t.id}-error`);e.textContent=t.validationMessage,t.classList.add(this._inputErrorClass),e.classList.add(this._errorClass)}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);e.textContent="",t.classList.remove(this._inputErrorClass),e.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this.enableButton()}_hasInvalidInput(){return this._inputEls.some((t=>!t.validity.valid))}disableButton(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._inactiveButtonClass)}enableButton(){this._submitButton.removeAttribute("disabled"),this._submitButton.classList.remove(this._inactiveButtonClass)}enableValidation(){this._inputEls.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((t=>{this._hideInputError(t)}))}}class s{constructor(t){let{popupSelector:e}=t;this._popupSelector=e,this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),this._popupElement.querySelector(".modal__overlay").classList.add("modal__overlay_active"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),this._popupElement.querySelector(".modal__overlay").classList.remove("modal__overlay_active"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(t=>{t.target.classList.contains("modal")&&this.close()}))}}class i extends s{constructor(t,e){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:()=>{};super({popupSelector:t}),this._popup=document.querySelector(t),this._handleFormSubmit=e,this._form=this._popup.querySelector("form"),this._inputs=Array.from(this._form.querySelectorAll("input")),this._formData={},this._handleFormClose=s}_focusFirstInputField(){const t=this._inputs[0];t&&(t.focus(),t.select())}setInputValues(t){this._inputs.forEach((e=>{e.value=t[e.name]||""}))}open(t){this.setInputValues(t),super.open(),this._focusFirstInputField()}_getInputValues(){const t={};return this._inputs.forEach((e=>{t[e.name]=e.value})),t}close(){const t=this._getInputValues();this._formData=t,this._handleFormClose&&this._handleFormClose(t),super.close()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues()),this._formData={},this._form.reset(),this.close()}))}}const n=document.querySelector("#profile-edit-button"),r=(document.querySelector("#profile-title"),document.querySelector("#profile-subtitle"),document.querySelector("#add-card-button"));document.querySelector(".cards__list");let o={title:"",image:""};function l(t,e){m.open(t,e)}function a(e){return new t(e,"#card-template",l).getCardElement()}const c={};var u;u={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(u.formSelector)).forEach((t=>{const s=new e(u,t),i=t.getAttribute("name");c[i]=s,s.enableValidation()})),c["profile-form"].resetValidation(),c["card-form"].resetValidation();const d=new i("#profile-edit-modal",(function(t){p.setUserInfo({title:t.title,subtitle:t.subtitle}),d.close()})),_=new i("#add-card-modal",(function(t){const e=t.title,s=t.title,i=t.image;h.addItem(a({name:e,alt:s,link:i})),_.close(),c["card-form"].disableButton()}),(function(t){o={...t}})),m=new class extends s{constructor(t){super({popupSelector:t}),this._fullImage=this._popupElement.querySelector("#card-full-image"),this._fullImageTitle=this._popupElement.querySelector("#card-caption")}open(t){let{name:e,link:s}=t;this._fullImage.src=s,this._fullImage.alt=e,this._fullImageTitle.textContent=e,super.open()}}("#card-image-modal"),h=new class{constructor(t,e){let{items:s,renderer:i}=t;this._items=s,this._renderer=i,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:t=>{h.addItem(a(t))}},"#card-list");h.renderItems();const p=new class{constructor(t){let{title:e,subtitle:s}=t;this._title=document.querySelector(e),this._subtitle=document.querySelector(s)}getUserInfo(){return{title:this._title.textContent.trim(),subtitle:this._subtitle.textContent.trim()}}setUserInfo(t){let{title:e,subtitle:s}=t;this._title.textContent=e,this._subtitle.textContent=s}}({title:".profile__title",subtitle:".profile__subtitle"});d.setEventListeners(),_.setEventListeners(),m.setEventListeners(),n.addEventListener("click",(()=>{const{title:t,subtitle:e}=p.getUserInfo();d.open({title:t,subtitle:e}),c["profile-form"].resetValidation()})),r.addEventListener("click",(()=>{_.open(o)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,