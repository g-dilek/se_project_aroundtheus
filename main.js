!function(){"use strict";class e{constructor(e){let{popupSelector:t}=e;this._popupSelector=t,this.popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this.popupElement.classList.add("modal_opened"),this.popupElement.querySelector(".modal__overlay").classList.add("modal__overlay_active"),document.addEventListener("keydown",this._handleEscClose)}close(){this.popupElement.classList.remove("modal_opened"),this.popupElement.querySelector(".modal__overlay").classList.remove("modal__overlay_active"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this.popupElement.querySelector(".modal__close-button").addEventListener("click",(()=>{this.close()})),this.popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal")&&this.close()}))}}function t(t,r){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Save";return r instanceof e?(r.popupElement,r.submitButton?Promise.resolve(t()).then((()=>{r.close()})).catch((e=>{throw console.error(`Error: ${e}`),e})).finally((()=>{r.renderLoading(!1,s)})):(console.error("Submit button not found in popup."),Promise.reject("Submit button not found"))):(console.error("The provided popupInstance is not an instance of Popup."),Promise.reject("Invalid popup instance"))}class r{constructor(e,t,r,s,i){this._title=e.name,this._image=e.link,this._id=e._id,this.isLiked=e.isLiked||!1,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteClick=s,this._handleLikeClick=i,this._cardTemplate=document.querySelector(this._cardSelector),this._cardElement=this._getCardElement(),this._setEventListeners(),this._updateLikeState()}_setEventListeners(){this._cardElement.querySelector(".cards__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardElement.querySelector(".cards__delete-button").addEventListener("click",(()=>{this._handleDeleteClick(this)})),this._cardElement.querySelector(".cards__image").addEventListener("click",(()=>{this._handleImageClick(this._title,this._image)}))}_getCardElement(){const e=this._cardTemplate.content.firstElementChild.cloneNode(!0);return e.querySelector(".cards__title").textContent=this._title,e.querySelector(".cards__image").src=this._image,e.querySelector(".cards__image").alt=this._title,e}getCardElement(){return this._cardElement}getId(){return this._id}removeCard(){this._cardElement?(this._cardElement.remove(),this._cardElement=null):console.error("Card element is null for card:",this)}_updateLikeState(){this._cardElement.querySelector(".cards__like-button").classList.toggle("cards__like-button_active",this.isLiked)}updateLikeState(e){this.isLiked=e,this._updateLikeState()}}function s(e,t,s,i){return new r(e,"#card-template",t,s,i).getCardElement()}class i{constructor(e,t){this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this.submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this.submitButton=this._form.querySelector(this.submitButtonSelector),this._setEventListeners()}_setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault()}))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent=e.validationMessage,e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);t.textContent="",e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass)}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this.enableButton()}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}disableButton(){this.submitButton.setAttribute("disabled",!0),this.submitButton.classList.add(this._inactiveButtonClass)}enableButton(){this.submitButton.removeAttribute("disabled"),this.submitButton.classList.remove(this._inactiveButtonClass)}enableValidation(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}}class n extends e{constructor(e,t,r){super({popupSelector:e}),this._handleSubmit=t,this._form=this.popupElement.querySelector("form"),this.submitButton=this._form.querySelector("button[type='submit']"),this.submitButtonText=this.submitButton.textContent,this._formValidator=r,this._inputs=Array.from(this._form.querySelectorAll("input"))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this.renderLoading(!0);const t=this._handleSubmit(this._getInputValues());if(!(t instanceof Promise))return console.error("The handleSubmit method did not return a promise."),void this.renderLoading(!1);t.then((()=>this.close())).catch((e=>console.error(`Error during form submission: ${e}`))).finally((()=>this.renderLoading(!1)))}))}resetForm(){this._form.reset()}open(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super.open(),this._populateForm(e),this._focusFirstInput(),this._formValidator.resetValidation()}_focusFirstInput(){const e=this._inputs[0];e&&e.focus()}_populateForm(e){Object.entries(e).forEach((e=>{let[t,r]=e;const s=this._form.querySelector(`input[name="${t}"]`);s&&(s.value=r)}))}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this.submitButton.textContent=e?t:this.submitButtonText}}const o=document.querySelector("#profile-edit-button"),a=(document.querySelector("#profile-title"),document.querySelector("#profile-subtitle"),document.querySelector("#add-card-button")),l=document.querySelector(".profile__avatar-edit-button");let d=null,c={title:"",image:""};const u={};var h;h={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(h.formSelector)).forEach((e=>{const t=new i(h,e),r=e.getAttribute("name");u[r]=t,t.enableValidation()}));const m=new class extends e{constructor(e,t){let{popupSelector:r}=e;super({popupSelector:r}),this._onConfirmDeleteAction=t,this.submitButton=this.popupElement.querySelector(".modal__save-button"),this.submitButtonText=this.submitButton.textContent}setDeleteConfirmCallback(e){this._onConfirmDeleteAction=e}_confirmDelete=()=>"function"==typeof this._onConfirmDeleteAction?this._onConfirmDeleteAction():Promise.resolve();setEventListeners(){super.setEventListeners(),document.getElementById("confirm-delete-yes-button").addEventListener("click",(e=>{e.preventDefault(),this.renderLoading(!0);const t=this._confirmDelete();if(!(t instanceof Promise))return console.error("The _confirmDelete method did not return a promise."),void this.renderLoading(!1);t.then((()=>this.close())).catch((e=>console.error(`Error during deletion: ${e}`))).finally((()=>this.renderLoading(!1)))}))}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Deleting...";this.submitButton.textContent=e?t:this.submitButtonText}}({popupSelector:"#confirm-delete-modal"},(function(){return t((()=>d?E.deleteCard(d.getId()).then((()=>(d._cardElement?d.removeCard():console.warn("Card element is null"),d=null,Promise.resolve()))).catch((e=>(console.error("Error deleting card:",e),Promise.reject(e)))).finally((()=>{m.close()})):(console.error("No card to delete."),Promise.resolve())),m,"Yes","Deleting...")})),_=new n("#profile-image-modal",(function(e){return t((()=>E.updateProfileAvatar({avatar:e.image}).then((e=>{b.setUserAvatar({avatar:e.avatar})}))),_)}),u["profile-image-form"]),p=new n("#profile-edit-modal",(function(e){return t((()=>E.updateProfileInfo({name:e.title,description:e.subtitle}).then((e=>{b.setUserInfo(e)}))),p)}),u["profile-edit-form"]),f=new n("#add-card-modal",(function(e){return t((()=>E.addCard({name:e.title,link:e.image}).then((e=>{const t=s(e,L,S,C);g.addItem(t)}))),f)}),u["add-card-form"]),v=new class extends e{constructor(e){super({popupSelector:e}),this._imageElement=this.popupElement.querySelector(".modal__card-image"),this._captionElement=this.popupElement.querySelector(".modal__caption"),this._imageElement||console.error("Image element not found"),this._captionElement||console.error("Caption element not found")}open(e,t){e&&t?(this._imageElement.src=t,this._imageElement.alt=e,this._captionElement.textContent=e,super.open()):console.error("Image name or link is missing")}}("#card-image-modal"),E=new class{constructor(e){this._headers=e.headers,this._baseUrl=e.baseUrl}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}_request(e,t){return fetch(e,t).then(this._handleResponse)}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers})}addCard(e){let{name:t,link:r}=e;return t&&r?this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:r})}):Promise.reject("Missing name or link")}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}unlikeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}updateProfileInfo(e){let{name:t,description:r}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:r})})}updateProfileAvatar(e){let{avatar:t}=e;return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})})}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers})}getAppData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"298fcaaa-e173-4e81-9326-ea95e21a4625","Content-Type":"application/json"}}),b=new class{constructor(e){let{title:t,subtitle:r,avatar:s}=e;this._title=document.querySelector(t),this._subtitle=document.querySelector(r),this._avatar=document.querySelector(s)}getUserInfo(){return{title:this._title.textContent.trim(),subtitle:this._subtitle.textContent.trim(),avatar:this._avatar.src}}setUserInfo(e){let{name:t,about:r}=e;this._title.textContent=t,this._subtitle.textContent=r}setUserAvatar(e){let{avatar:t}=e;this._avatar.src=t}}({title:".profile__title",subtitle:".profile__subtitle",avatar:".profile__image"}),g=new class{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._renderer=s,this._container=document.querySelector(t)}setItems(e){this._items=e||[],this.renderItems()}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}appendItem(e){this._container.append(e)}}({items:[],renderer:e=>{const t=s(e,L,S,C);g.addItem(t)}},"#card-list");function S(e){e._cardElement||console.error("Card element is null for card:",e),d=e,m.open()}function C(e){const t=!e.isLiked;e.updateLikeState(t),e.isLiked=t,(t?E.likeCard(e.getId()):E.unlikeCard(e.getId())).then((()=>{e.updateLikeState(t)})).catch((r=>{console.error("Error toggling like state:",r),e.updateLikeState(!t),e.isLiked=!t}))}function L(e,t){v.open(e,t)}(async()=>{try{const[e,t]=await Promise.all([E.getInitialCards(),E.getUserInfo()]);g.setItems(e),b.setUserInfo({name:t.name,about:t.about}),b.setUserAvatar({avatar:t.avatar})}catch(e){console.error("Initialization error:",e)}})(),p.setEventListeners(),f.setEventListeners(),v.setEventListeners(),_.setEventListeners(),m.setEventListeners(),o.addEventListener("click",(()=>{const e=b.getUserInfo();p.open({title:e.title,subtitle:e.subtitle}),u["profile-edit-form"].resetValidation()})),a.addEventListener("click",(()=>{f.open(c)})),l.addEventListener("click",(()=>{_.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,